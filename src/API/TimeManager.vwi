

{
    function buildColorSet(mode = 0, tiers = 4, levels = [0.25, 0.5, 0.75, 1]) {
        // mode   >> 0 (light) or 1 (dark)
        // tiers  >> content, content1, content2, (how many)
        // levels >> opacity levels
        
        let hue = 100
        let sat = 0
        let diffLgt = 4

        let colorTypes = [
            {
                name: "primary",
                hue: hue,
                sat: sat,
                lgt: [96, 0]
            },
            {
                name: "content",
                hue: hue,
                sat: sat,
                lgt: [0, 96]
            },
            {
                name: "accent",
                hue: hue,
                sat: 50,
                lgt: [50, 30]
            },
            {
                name: "good",
                hue: 120,
                sat: 50,
                lgt: [50, 40]
            },
            {
                name: "bad",
                hue: 0,
                sat: 50,
                lgt: [50, 40]
            }
        ]

        for (let i = 0; i < tiers; i++) {
            levels.forEach(level => {
                colorTypes.forEach(colorType => {
                    let name = `--${colorType.name}${i > 0 ? i : ""}${level < 1 ? level * 100 : ""}`
                    let hsl = `hsl(${colorType.hue}, ${colorType.sat}%, ${colorType.lgt[mode] - (diffLgt * i * (mode == 1 ? -1 : 1))}%, ${level})`
                    document.documentElement.style.setProperty(name, hsl);
                })
            })
        }
    }

    const timeManager = {
        dawn: () => {
            if (store.get("map overlay visible") == "true") {
                map.setStyle(map_styles[0])
            }
            timeManager.mode(0)
        },
        day: () => {
            if (store.get("map overlay visible") == "true") {
                map.setStyle(map_styles[1])
            }
            timeManager.mode(0)
        },
        dusk: () => {
            if (store.get("map overlay visible") == "true") {
                map.setStyle(map_styles[2])
            }
            timeManager.mode(1)
        },
        night: () => {
            if (store.get("map overlay visible") == "true") {
                map.setStyle(map_styles[3])
            }
            timeManager.mode(1)
        },
        mode: (mode) => {
            buildColorSet(mode, 8, [0.25, 0.5, 0.75, 1])
        },
    }

    function updateSunTimesAPI() {
        const url = `https://api.sunrise-sunset.org/json?lat=${store.get("position lat")}&lng=${store.get("position long")}&formatted=0`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                const dawn = new Date(data.results.civil_twilight_begin);
                const day = new Date(data.results.sunrise);
                const dusk = new Date(data.results.civil_twilight_end);
                const night = new Date(data.results.nautical_twilight_end);
                const now = new Date()

                if (now < dawn) {
                    timeManager.night()
                }
                else if (now < day) {
                    timeManager.dawn()
                }
                else if (now < dusk) {
                    timeManager.day()
                }
                else if (now < night) {
                    timeManager.dusk()
                }
                else {
                    timeManager.night()
                }
            })
            .catch(error => {
                console.error('Error fetching sun times:', error);
            });
    }
}