

{
    function buildColorSet(mode, tiers, levels) {
        let colorTypes = ["primary", "content"]

        for (let i = 0; i < tiers; i++) {
            levels.forEach(level => {
                colorTypes.forEach(colorType => {
                    let primaryLight = mode == "light" ? 100 : 0
                    let contentLight = mode == "light" ? 0 : 100
                    let lightness = colorType == "primary" ? primaryLight : contentLight
                    let varName = `--${colorType}${i > 0 ? i : ""}${level < 1 ? 100 * level : ""}`
                    let varValue = `hsl(0, 0%, ${lightness}%, ${level})`
                    document.documentElement.style.setProperty(varName, varValue)
                })
            })
        }
    }

    const timeManager = {
        dawn: () => {
            map.setStyle(map_styles[0])
            timeManager.mode("light")
        },
        day: () => {
            map.setStyle(map_styles[1])
            timeManager.mode("light")
        },
        dusk: () => {
            map.setStyle(map_styles[2])
            timeManager.mode("dark")
        },
        night: () => {
            map.setStyle(map_styles[3])
            timeManager.mode("dark")
        },
        mode: (mode) => {
            buildColorSet(mode, 3, [0.25, 0.5, 0.75, 1])
        },
    }

    function updateSunTimesAPI() {
        const url = `https://api.sunrise-sunset.org/json?lat=${store.get("position lat")}&lng=${store.get("position long")}&formatted=0`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                const dawn = new Date(data.results.civil_twilight_begin);
                const day = new Date(data.results.sunrise);
                const dusk = new Date(data.results.civil_twilight_end);
                const night = new Date(data.results.nautical_twilight_end);
                const now = new Date()

                if (now < dawn) {
                    timeManager.night()
                }
                else if (now < day) {
                    timeManager.dawn()
                }
                else if (now < dusk) {
                    timeManager.day()
                }
                else if (now < night) {
                    timeManager.dusk()
                }
                else {
                    timeManager.night()
                }
            })
            .catch(error => {
                console.error('Error fetching sun times:', error);
            });
    }
}