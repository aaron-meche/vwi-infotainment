

{
    // getColor "light", "primary", 1, 12, 0
    function getColor(mode, type, opacity = 1, delta, count) {
        const baseColors = {
            "light": {
                "primary": [0, 0, 100],
                "content": [0, 0, 0]
            },
            "dark": {
                "primary": [0, 0, 0],
                "content": [0, 0, 100]
            }
        }
        let rgbVal = [baseColors[mode][type]]
        rgbVal[0][2] = Math.abs(rgbVal[0][2] - (delta * count))
        rgbVal.push(opacity)
        return `hsl(${rgbVal.join(",")})`
    }

    const timeManager = {
        dawn: () => {
            map.setStyle(map_styles[0])
            timeManager.mode("light")
        },
        day: () => {
            map.setStyle(map_styles[1])
            timeManager.mode("light")
        },
        dusk: () => {
            map.setStyle(map_styles[2])
            timeManager.mode("dark")
        },
        night: () => {
            map.setStyle(map_styles[3])
            timeManager.mode("dark")
        },
        mode: (mode) => {
            function createColor(type, delta = 0, count = 0) {
                let colors = []
                let levels = [0.25, 0.5, 0.75, 1]
                levels.forEach(level => {
                    colors.push([type + (count > 0 ? count : "") + (level == 1 ? "" : level * 100), getColor(mode, type, level, delta, count)])
                })
                return colors
            }

            let color_delta = 8

            let colors = [
                ...createColor("primary", color_delta, 0), 
                ...createColor("primary", color_delta, 1), 
                ...createColor("primary", color_delta, 2), 
                ...createColor("primary", color_delta, 3), 
                ...createColor("primary", color_delta, 4), 
                
                ...createColor("content", color_delta, 0),
                ...createColor("content", color_delta, 1),
                ...createColor("content", color_delta, 2),
                ...createColor("content", color_delta, 3),
                ...createColor("content", color_delta, 4),
            ]
            console.log(colors)

            colors.forEach(color => {
                document.documentElement.style.setProperty("--" + color[0], color[1])
            })

            // let obj = mode == "light" ? timeManager.light : timeManager.dark
            // Object.keys(obj).forEach(key => {
            //     document.documentElement.style.setProperty("--" + key, "rgb(" + obj[key] + ")")
            // })
        },
    }

    function updateSunTimesAPI() {
        const url = `https://api.sunrise-sunset.org/json?lat=${store.get("position lat")}&lng=${store.get("position long")}&formatted=0`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                const dawn = new Date(data.results.civil_twilight_begin);
                const day = new Date(data.results.sunrise);
                const dusk = new Date(data.results.civil_twilight_end);
                const night = new Date(data.results.nautical_twilight_end);
                const now = new Date()

                if (now < dawn) {
                    timeManager.night()
                }
                else if (now < day) {
                    timeManager.dawn()
                }
                else if (now < dusk) {
                    timeManager.day()
                }
                else if (now < night) {
                    timeManager.dusk()
                }
                else {
                    timeManager.night()
                }
            })
            .catch(error => {
                console.error('Error fetching sun times:', error);
            });
    }
}